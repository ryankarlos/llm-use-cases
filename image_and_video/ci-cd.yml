name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r app/requirements.txt
          pip install pytest pytest-cov
      - name: Run tests
        run: pytest tests/ --cov=app

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-1' }}
      
      - name: Set environment variables
        run: |
          echo "AWS_REGION=${{ vars.AWS_REGION || 'eu-west-1' }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=${{ vars.ECR_REPOSITORY || 'canvas-video' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push Docker image
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPOSITORY_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
          
          # Create repository if it doesn't exist
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} || \
              aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
          
          # Build the Docker image
          docker build -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG} .
          
          # Push the Docker image
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
          
          # Tag as latest if on main branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag ${ECR_REPOSITORY_URI}:${IMAGE_TAG} ${ECR_REPOSITORY_URI}:latest
            docker push ${ECR_REPOSITORY_URI}:latest
          fi
          
          echo "image=${ECR_REPOSITORY_URI}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

  terragrunt-plan:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-1' }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Install Terragrunt
        run: |
          wget -q -O /tmp/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.0/terragrunt_linux_amd64
          chmod +x /tmp/terragrunt
          sudo mv /tmp/terragrunt /usr/local/bin/terragrunt
      
      - name: Terragrunt Plan
        run: |
          cd terragrunt
          export TF_VAR_image_tag=${{ github.sha }}
          terragrunt run-all plan --terragrunt-non-interactive

  terragrunt-apply:
    runs-on: ubuntu-latest
    needs: terragrunt-plan
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'eu-west-1' }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Install Terragrunt
        run: |
          wget -q -O /tmp/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v0.45.0/terragrunt_linux_amd64
          chmod +x /tmp/terragrunt
          sudo mv /tmp/terragrunt /usr/local/bin/terragrunt
      
      - name: Terragrunt Apply
        run: |
          cd terragrunt
          export TF_VAR_image_tag=${{ github.sha }}
          export TF_VAR_environment=${{ github.event.inputs.environment }}
          terragrunt run-all apply --terragrunt-non-interactive